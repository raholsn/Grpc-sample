// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Grpc.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Grpc.Contract {
  public static partial class GrpcService
  {
    static readonly string __ServiceName = "GrpcProto.GrpcService";

    static readonly grpc::Marshaller<global::Grpc.Contract.GrpcRequest> __Marshaller_GrpcRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.Contract.GrpcRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.Contract.GrpcResponse> __Marshaller_GrpcResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.Contract.GrpcResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.Contract.GrpcRequests> __Marshaller_GrpcRequests = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.Contract.GrpcRequests.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.Contract.GrpcResponses> __Marshaller_GrpcResponses = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.Contract.GrpcResponses.Parser.ParseFrom);

    static readonly grpc::Method<global::Grpc.Contract.GrpcRequest, global::Grpc.Contract.GrpcResponse> __Method_GetCustomer = new grpc::Method<global::Grpc.Contract.GrpcRequest, global::Grpc.Contract.GrpcResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCustomer",
        __Marshaller_GrpcRequest,
        __Marshaller_GrpcResponse);

    static readonly grpc::Method<global::Grpc.Contract.GrpcRequests, global::Grpc.Contract.GrpcResponses> __Method_GetCustomers = new grpc::Method<global::Grpc.Contract.GrpcRequests, global::Grpc.Contract.GrpcResponses>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCustomers",
        __Marshaller_GrpcRequests,
        __Marshaller_GrpcResponses);

    static readonly grpc::Method<global::Grpc.Contract.GrpcRequest, global::Grpc.Contract.GrpcResponse> __Method_GetCustomerWithBidirectionalStream = new grpc::Method<global::Grpc.Contract.GrpcRequest, global::Grpc.Contract.GrpcResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "GetCustomerWithBidirectionalStream",
        __Marshaller_GrpcRequest,
        __Marshaller_GrpcResponse);

    static readonly grpc::Method<global::Grpc.Contract.GrpcRequest, global::Grpc.Contract.GrpcResponse> __Method_GetCustomerWithClientStream = new grpc::Method<global::Grpc.Contract.GrpcRequest, global::Grpc.Contract.GrpcResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "GetCustomerWithClientStream",
        __Marshaller_GrpcRequest,
        __Marshaller_GrpcResponse);

    static readonly grpc::Method<global::Grpc.Contract.GrpcRequest, global::Grpc.Contract.GrpcResponse> __Method_GetCustomerWithServerStream = new grpc::Method<global::Grpc.Contract.GrpcRequest, global::Grpc.Contract.GrpcResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetCustomerWithServerStream",
        __Marshaller_GrpcRequest,
        __Marshaller_GrpcResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Grpc.Contract.GrpcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GrpcService</summary>
    public abstract partial class GrpcServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Grpc.Contract.GrpcResponse> GetCustomer(global::Grpc.Contract.GrpcRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Grpc.Contract.GrpcResponses> GetCustomers(global::Grpc.Contract.GrpcRequests request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetCustomerWithBidirectionalStream(grpc::IAsyncStreamReader<global::Grpc.Contract.GrpcRequest> requestStream, grpc::IServerStreamWriter<global::Grpc.Contract.GrpcResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Grpc.Contract.GrpcResponse> GetCustomerWithClientStream(grpc::IAsyncStreamReader<global::Grpc.Contract.GrpcRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetCustomerWithServerStream(global::Grpc.Contract.GrpcRequest request, grpc::IServerStreamWriter<global::Grpc.Contract.GrpcResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GrpcService</summary>
    public partial class GrpcServiceClient : grpc::ClientBase<GrpcServiceClient>
    {
      /// <summary>Creates a new client for GrpcService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GrpcServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GrpcService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GrpcServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GrpcServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GrpcServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Grpc.Contract.GrpcResponse GetCustomer(global::Grpc.Contract.GrpcRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCustomer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpc.Contract.GrpcResponse GetCustomer(global::Grpc.Contract.GrpcRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCustomer, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.Contract.GrpcResponse> GetCustomerAsync(global::Grpc.Contract.GrpcRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCustomerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.Contract.GrpcResponse> GetCustomerAsync(global::Grpc.Contract.GrpcRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCustomer, null, options, request);
      }
      public virtual global::Grpc.Contract.GrpcResponses GetCustomers(global::Grpc.Contract.GrpcRequests request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCustomers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpc.Contract.GrpcResponses GetCustomers(global::Grpc.Contract.GrpcRequests request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCustomers, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.Contract.GrpcResponses> GetCustomersAsync(global::Grpc.Contract.GrpcRequests request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCustomersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.Contract.GrpcResponses> GetCustomersAsync(global::Grpc.Contract.GrpcRequests request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCustomers, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Grpc.Contract.GrpcRequest, global::Grpc.Contract.GrpcResponse> GetCustomerWithBidirectionalStream(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCustomerWithBidirectionalStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Grpc.Contract.GrpcRequest, global::Grpc.Contract.GrpcResponse> GetCustomerWithBidirectionalStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_GetCustomerWithBidirectionalStream, null, options);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Grpc.Contract.GrpcRequest, global::Grpc.Contract.GrpcResponse> GetCustomerWithClientStream(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCustomerWithClientStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Grpc.Contract.GrpcRequest, global::Grpc.Contract.GrpcResponse> GetCustomerWithClientStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_GetCustomerWithClientStream, null, options);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Grpc.Contract.GrpcResponse> GetCustomerWithServerStream(global::Grpc.Contract.GrpcRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCustomerWithServerStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Grpc.Contract.GrpcResponse> GetCustomerWithServerStream(global::Grpc.Contract.GrpcRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetCustomerWithServerStream, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GrpcServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GrpcServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GrpcServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetCustomer, serviceImpl.GetCustomer)
          .AddMethod(__Method_GetCustomers, serviceImpl.GetCustomers)
          .AddMethod(__Method_GetCustomerWithBidirectionalStream, serviceImpl.GetCustomerWithBidirectionalStream)
          .AddMethod(__Method_GetCustomerWithClientStream, serviceImpl.GetCustomerWithClientStream)
          .AddMethod(__Method_GetCustomerWithServerStream, serviceImpl.GetCustomerWithServerStream).Build();
    }

  }
}
#endregion
